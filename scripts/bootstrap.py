import random
import sys

from tqdm import tqdm


random.seed(100)


TASKS_METADATA = [  # task name, num templates, random performance
    ("ANLI", 45, 1/3),
    ("Hellaswag", 4, 1/4),
    ("StoryCloze", 5, 1/2),
    ("CB", 15, 1/3),
    ("COPA", 12, 1/2),
    ("RTE", 10, 1/2),
    ("WIC", 10, 1/2),
    ("WSC", 10, 1/2),
    ("Winogrande", 5, 1/2),
]
NUM_INSTANCES = [1000,1000,1200,1000,1000,1200,1000,1000,1200,1000,1000,1200,1000,1000,1200,1000,1000,1200,1000,1000,1200,1000,1000,1200,1000,1000,1200,1000,1000,1200,1000,1000,1200,1000,1000,1200,1000,1000,1200,1000,1000,1200,1000,1000,1200,10042,10042,10042,10042,1871,1871,1871,1871,1871,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,48,100,100,100,100,100,100,100,100,48,52,52,277,277,277,277,277,277,277,277,277,277,638,638,638,638,638,638,638,638,638,638,104,104,104,104,104,104,104,104,104,104,1267,1267,1267,1267,1267]
RANDOM_SCORES = [e for metadata in TASKS_METADATA for e in [metadata[2]]  * metadata[1]]

XL_T0REPRO_DEEP = [0.382999986410141,0.3400000035762787,0.32499998807907104,0.3630000054836273,0.3160000145435333,0.398333340883255,0.39500001072883606,0.3569999933242798,0.40583333373069763,0.34299999475479126,0.3619999885559082,0.4008333384990692,0.3720000088214874,0.34299999475479126,0.3166666626930237,0.37599998712539673,0.3630000054836273,0.3958333432674408,0.34599998593330383,0.35499998927116394,0.40416666865348816,0.3709999918937683,0.3479999899864197,0.36916667222976685,0.3400000035762787,0.35899999737739563,0.3408333361148834,0.4009999930858612,0.34200000762939453,0.36916667222976685,0.3659999966621399,0.37599998712539673,0.41083332896232605,0.375,0.3440000116825104,0.398333340883255,0.3930000066757202,0.3310000002384186,0.3824999928474426,0.38499999046325684,0.36500000953674316,0.3916666805744171,0.35600000619888306,0.34700000286102295,0.4258333444595337,0.28719377517700195,0.2502489686012268,0.28779128193855286,0.2903803884983063,0.9182255268096924,0.911811888217926,0.9262426495552063,0.9160876274108887,0.9203634262084961,0.8214285969734192,0.8392857313156128,0.6785714030265808,0.7857142686843872,0.8214285969734192,0.8035714030265808,0.7678571343421936,0.7857142686843872,0.6785714030265808,0.8392857313156128,0.8035714030265808,0.8214285969734192,0.8571428656578064,0.8035714030265808,0.5714285969734192,0.875,0.7900000214576721,0.7200000286102295,0.7900000214576721,0.8500000238418579,0.8100000023841858,0.7799999713897705,0.8299999833106995,0.8299999833106995,0.9166666865348816,0.7692307829856873,0.7692307829856873,0.8122743964195251,0.7653429508209229,0.8050541281700134,0.833935022354126,0.8050541281700134,0.7870036363601685,0.7689530849456787,0.7833935022354126,0.7761732935905457,0.7797833681106567,0.5470219254493713,0.5250783562660217,0.5297805666923523,0.554858922958374,0.5423197746276855,0.5313479900360107,0.5595611333847046,0.5250783562660217,0.5329153537750244,0.5423197746276855,0.49038460850715637,0.5288461446762085,0.4423076808452606,0.5192307829856873,0.6538461446762085,0.682692289352417,0.5480769276618958,0.5480769276618958,0.567307710647583,0.5769230723381042,0.5406472086906433,0.5548539757728577,0.5390686392784119,0.518547773361206,0.5351223349571228]
XL_MTL_DEEP = [0.36000001430511475,0.36000001430511475,0.335833340883255,0.4129999876022339,0.33399999141693115,0.4099999964237213,0.41600000858306885,0.3499999940395355,0.3916666805744171,0.33000001311302185,0.36500000953674316,0.3916666805744171,0.3540000021457672,0.34299999475479126,0.3241666555404663,0.39899998903274536,0.3930000066757202,0.39500001072883606,0.40299999713897705,0.375,0.4099999964237213,0.37700000405311584,0.34200000762939453,0.3708333373069763,0.35899999737739563,0.36500000953674316,0.3774999976158142,0.41600000858306885,0.35600000619888306,0.36666667461395264,0.36500000953674316,0.3619999885559082,0.4050000011920929,0.3799999952316284,0.36399999260902405,0.3841666579246521,0.4020000100135803,0.32499998807907104,0.3933333456516266,0.40799999237060547,0.3799999952316284,0.37833333015441895,0.3709999918937683,0.36899998784065247,0.4074999988079071,0.30860385298728943,0.26986655592918396,0.29247161746025085,0.29784902930259705,0.920897901058197,0.9326563477516174,0.9321218729019165,0.921432375907898,0.9203634262084961,0.8035714030265808,0.8214285969734192,0.8214285969734192,0.8035714030265808,0.7678571343421936,0.7857142686843872,0.8571428656578064,0.8392857313156128,0.7857142686843872,0.8392857313156128,0.75,0.8035714030265808,0.8214285969734192,0.8571428656578064,0.75,0.7291666865348816,0.8100000023841858,0.7099999785423279,0.7699999809265137,0.800000011920929,0.800000011920929,0.7599999904632568,0.8299999833106995,0.8100000023841858,0.7708333134651184,0.75,0.7307692170143127,0.7797833681106567,0.7292418479919434,0.7039711475372314,0.7942238450050354,0.7328519821166992,0.6931408047676086,0.7039711475372314,0.750902533531189,0.6859205961227417,0.7220216393470764,0.5768024921417236,0.5219435691833496,0.5454545617103577,0.5877742767333984,0.5877742767333984,0.5611284971237183,0.5203761458396912,0.5094043612480164,0.568965494632721,0.5626959204673767,0.4711538553237915,0.5769230723381042,0.5192307829856873,0.6346153616905212,0.6346153616905212,0.6538461446762085,0.4711538553237915,0.4711538553237915,0.5,0.5769230723381042,0.5217047929763794,0.5611681342124939,0.5730071067810059,0.5493291020393372,0.5603788495063782]

assert all(len(RANDOM_SCORES) == len(NUM_INSTANCES) == sum(m[1] for m in TASKS_METADATA) == len(l) for k, l in globals().items() if any(k.startswith(p) for p in ("LARGE", "XL", "T0")))


def avg(l):
    return sum(l) / len(l)


def macro_avg(l):
    per_task = []
    for _, num_prompts, _ in TASKS_METADATA:
        per_task.append(avg(l[:num_prompts]))
        l = l[num_prompts:]
    assert len(l) == 0
    return avg(per_task)


def arg(results):
    assert len(RANDOM_SCORES) == len(results)
    scores = [sum(r) / num for r, num in zip(results, NUM_INSTANCES)]
    rgs = [(score - baseline) / baseline for baseline, score in zip(RANDOM_SCORES, scores)]
    return macro_avg(rgs)


def pairwise_test(worse_scores, better_scores):
    worse_n_correct = [round(score * num) for score, num in zip(worse_scores, NUM_INSTANCES)]
    better_n_correct = [round(score * num) for score, num in zip(better_scores, NUM_INSTANCES)]
    worse_results = [[1] * n_correct + [0] * (num - n_correct) for n_correct, num in zip(worse_n_correct, NUM_INSTANCES)]
    better_results = [[1] * n_correct + [0] * (num - n_correct) for n_correct, num in zip(better_n_correct, NUM_INSTANCES)]

    print(f"Original ARG: worse {arg(worse_results)}, better {arg(better_results)}")

    arg_diffs = []
    for _ in tqdm(range(1000)):
        new_worse_results = []
        new_better_results = []
        for worse, better in zip(worse_results, better_results):
            new_worse, new_better = zip(*random.choices(list(zip(worse, better)), k=len(worse)))
            new_worse_results.append(new_worse)
            new_better_results.append(new_better)
        worse_arg = arg(new_worse_results)
        better_arg = arg(new_better_results)
        arg_diffs.append(better_arg - worse_arg)

    print(f"arg p: {avg([d < 0 for d in arg_diffs])}")


def main():
    pairwise_test(XL_T0REPRO_DEEP, XL_MTL_DEEP)


if __name__ == "__main__":
    main(*sys.argv[1:])  # pylint: disable=no-value-for-parameter
